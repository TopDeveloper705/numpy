# Workflow to build and test wheels.
# To work on the wheel building infrastructure on a fork, comment out:
#
# if: github.repository == 'numpy/numpy'
#
# in the get_commit_message job. Be sure to include [cd build] in your commit
# message to trigger the build. All files related to wheel building are located
# at tools/wheels/
name: Wheel builder

on:
  schedule:
    # Nightly build at 1:42 UTC
    - cron: "42 1 * * *"
  push:
  pull_request:
  workflow_dispatch:

jobs:
  get_commit_message:
    name: Get commit message
    runs-on: ubuntu-latest
    if: github.repository == 'numpy/numpy'
    outputs:
      message: ${{ steps.commit_message.outputs.message }}
    steps:
      - name: Checkout numpy
        uses: actions/checkout@v2
        # Gets the correct commit message for pull request
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Get commit message
        id: commit_message
        run: |
          set -xe
          COMMIT_MSG=$(git log --no-merges -1 --oneline)
          echo "::set-output name=message::$COMMIT_MSG"

  build_wheels:
    name: Build wheel for ${{ matrix.python }}-${{ matrix.platform }}
    needs: get_commit_message
    if: >-
      contains(needs.get_commit_message.outputs.message, '[wheel build]') ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        include:
        # manylinux builds
        - os: ubuntu-20.04
          python: "cp38"
          platform: manylinux_x86_64
        - os: ubuntu-20.04
          python: "cp39"
          platform: manylinux_x86_64
        - os: ubuntu-20.04
          python: "cp310"
          platform: manylinux_x86_64
        # manylinux pypy builds
        - os: ubuntu-20.04
          python: "pp38"
          platform: manylinux_x86_64

        # MacOS builds
        - os: macos-10.15
          python: "cp38"
          platform: macosx_*
        - os: macos-10.15
          python: "cp39"
          platform: macosx_*
        - os: macos-10.15
          python: "cp310"
          platform: macosx_*
        # MacOS PyPy builds
        # Disabled for now because of a PyPy bug
        # that prevents successful compilation
        #- os: macos-10.15
        #  python: "pp38"
        #  platform: macosx_x86_64

        # Windows builds
        - os: windows-2019
          python: "cp38"
          platform: win_amd64
        - os: windows-2019
          python: "cp39"
          platform: win_amd64
        - os: windows-2019
          python: "cp310"
          platform: win_amd64
        # Windows PyPy builds
        - os: windows-2019
          python: "pp38"
          platform: win_amd64

    steps:
      - name: Checkout numpy
        uses: actions/checkout@v2
        with:
          submodules: true
          # versioneer.py requires the latest tag to be reachable. Here we
          # fetch the complete history to get access to the tags.
          # A shallow clone can work when the following issue is resolved:
          # https://github.com/actions/checkout/issues/338
          fetch-depth: 0

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.3.0
        env:
          NPY_USE_BLAS_ILP64: 1
          CIBW_BUILD: ${{ matrix.python }}-${{ matrix.platform }}
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_ENVIRONMENT_LINUX: CFLAGS='-std=c99 -fno-strict-aliasing'
                                  LDFLAGS='-Wl,--strip-debug'
                                  OPENBLAS64_=/usr/local
                                  RUNNER_OS='Linux'
          # MACOS linker doesn't support stripping symbols
          CIBW_ENVIRONMENT_MACOS: CFLAGS='-std=c99 -fno-strict-aliasing'
                                  OPENBLAS64_=/usr/local
                                  CC=clang
                                  CXX=clang++
          # TODO: Add universal2 wheels, we need to fuse them manually
          # instead of going through cibuildwheel
          # This is because cibuildwheel tries to make a fat wheel
          # https://github.com/multi-build/multibuild/blame/devel/README.rst#L541-L565
          # for more info
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_TEST_SKIP: "*_arm64 *_universal2:arm64"
          # Hardcode for now,blas stuff needs changes for 32-bit
          CIBW_ENVIRONMENT_WINDOWS: NPY_USE_BLAS_ILP64=1
                                    OPENBLAS64_=openblas
          CIBW_BUILD_VERBOSITY: 3
          CIBW_BEFORE_BUILD: bash {project}/tools/wheels/cibw_before_build.sh {project}
          CIBW_BEFORE_TEST: pip install -r {project}/test_requirements.txt
          CIBW_TEST_COMMAND:  bash {project}/tools/wheels/cibw_test_command.sh {project}

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl
