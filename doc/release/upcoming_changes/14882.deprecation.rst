Using the aliases of builtin types like ``np.int`` is deprecated
----------------------------------------------------------------

For a long time, ``np.int`` has been an alias of the builtin ``int``. This is
repeatedly a cause of confusion for newcomers, and is also simply not useful.

These aliases have been deprecated. The table below shows the full list of
deprecated aliases, along with their exact meaning. Replacing uses of items in
the first column with the contents of the second column will work identically
and silence the deprecation warning.

In many cases, it may have been intended to use the types from the third column.
Be aware that use of these types may result in subtle but desirable behavior
changes.

==================  =================================  ==================================================================
Deprecated name     Identical to                       Possibly intended numpy type
==================  =================================  ==================================================================
``numpy.bool``      ``bool``                           `numpy.bool_`
``numpy.int``       ``int``                            `numpy.int_` (default int dtype), `numpy.cint` (C ``int``)
``numpy.float``     ``float``                          `numpy.float_`, `numpy.double` (equivalent)
``numpy.complex``   ``complex``                        `numpy.complex_`, `numpy.cdouble` (equivalent)
``numpy.object``    ``object``                         `numpy.object_`
``numpy.str``       ``str``                            `numpy.str_`
``numpy.long``      ``int`` (``long`` on Python 2)     `numpy.int_` (C ``long``), `numpy.longlong` (largest integer type)
``numpy.unicode``   ``str`` (``unicode`` on Python 2)  `numpy.unicode_`
==================  =================================  ==================================================================

Note that for technical reasons these deprecation warnings will only be emitted
on Python 3.7 and above.
