Changes to structured (void) dtype promotion and comparisons
------------------------------------------------------------
In general, NumPy now defines correct, but slightly limited, promotion for
structured dtypes by promoting the subtypes of each field instead of raising
an exception::

    >>> np.result_type(np.dtype("i,i"), np.dtype("i,d"))
    dtype([('f0', '<i4'), ('f1', '<f8')])

For promotion matching field names, order, and titles are enforced, however
padding is ignored.
Promotion involving structured dtypes now always ensures native byte-order for
all fields (which may change the result of ``np.concatenate``)
and ensures that the result will be "packed", i.e. all fields are ordered
contiguously and padding is removed.
See :ref:`structured_dtype_comparison_and_promotion` for further details.

The ``repr`` of aligned structures will now never print the long form
including ``offsets`` and ``itemsize`` unless the struct includes padding
not guaranteed by ``align=True``.


Changes to structured dtype casting safety
------------------------------------------
In alignment with the above changes to the promotion logic, the
casting safety has been updated:

* ``"equiv"`` enforces matching names and titles. The itemsize
  is allowed to differ due to padding.
* ``"safe"`` allows mismatching field names and titles
* The cast safety is limited by the cast safety of each included
  field.
* The order of fields is used to decide cast safety of each
  individual field.  Previously, the field names were used and
  only unsafe casts were possible when names mismatched.

The main important change here is that name mismatches are now
considered "safe" casts.

