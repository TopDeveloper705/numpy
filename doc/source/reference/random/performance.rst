Performance
-----------

.. py:module:: numpy.random

.. currentmodule:: numpy.random

Recommendation
**************
The recommended generator for single use is :class:`~PCG64`.

Timings
*******

The timings below are the time in ns to produce 1 random value from a
specific distribution.  The original :class:`~mt19937.MT19937` generator is
much slower since it requires 2 32-bit values to equal the output of the
faster generators.

Integer performance has a similar ordering.

The pattern is similar for other, more complex generators. The normal
performance of the legacy :class:`~mtrand.RandomState` generator is much
lower than the other since it uses the Box-Muller transformation rather
than the Ziggurat generator. The performance gap for Exponentials is also
large due to the cost of computing the log function to invert the CDF.
The column labeled MT19973 is used the same 32-bit generator as
:class:`~mtrand.RandomState` but produces random values using
:class:`~generator.Generator`.

.. csv-table::
    :header: ,PCG64,MT19937,Philox,RandomState
    :widths: 14,14,14,14,14

    32-bit Unsigned Ints,3.2,3.3,4.8,3.2
    64-bit Unsigned Ints,4.8,5.7,6.9,5.7
    Uniforms,5.0,7.3,8.0,7.3
    Normals,11.3,13.0,13.7,34.4
    Exponentials,6.7,7.9,8.6,40.3
    Gammas,30.6,34.2,35.1,58.1
    Binomials,25.7,27.7,28.4,25.9
    Laplaces,41.1,44.5,45.4,46.9
    Poissons,58.1,68.4,70.2,86.0


The next table presents the performance in percentage relative to values
generated by the legagy generator, `RandomState(MT19937())`. The overall
performance was computed using a geometric mean.

.. csv-table::
    :header: ,PCG64,MT19937,Philox
    :widths: 14,14,14,14

    32-bit Unsigned Ints,100,99,67
    64-bit Unsigned Ints,118,100,83
    Uniforms,147,100,91
    Normals,304,264,252
    Exponentials,601,512,467
    Gammas,190,170,166
    Binomials,101,93,91
    Laplaces,114,105,103
    Poissons,148,126,123
    Overall,167,145,131

.. note::

   All timings were taken using Linux on a i5-3570 processor.

Performance on different Operating Systems
******************************************
Performance differs across platforms due to compiler and hardware availability
(e.g., register width) differences. The default bit generator has been chosen
to perform well on 64-bit platforms.  Performance on 32-bit operating systems
is very different.

The values reported are normalized relative to the speed of MT19937 in
each table. A value of 100 indicates that the performance matches the MT19937.
Higher values indicate improved performance. These values cannot be compared
across tables.

64-bit Linux
~~~~~~~~~~~~

===================  =========  =======  ========
Distribution           MT19937    PCG64    Philox
===================  =========  =======  ========
32-bit Unsigned Int        100    113.9      72.1
64-bit Unsigned Int        100    143.3      89.7
Uniform                    100    181.5      90.8
Exponential                100    145.5      92.5
Normal                     100    121.4      98.3
**Overall**                100    139.3      88.2
===================  =========  =======  ========


64-bit Windows
~~~~~~~~~~~~~~
The performance on 64-bit Linux and 64-bit Windows is broadly similar.


===================   =========  =======  ========
Distribution            MT19937    PCG64    Philox
===================   =========  =======  ========
32-bit Unsigned Int         100    134.9      44.1
64-bit Unsigned Int         100    162.7      41.0
Uniform                     100    200.0      44.8
Exponential                 100    167.8      47.4
Normal                      100    135.6      60.3
**Overall**                 100    158.4      47.1
===================   =========  =======  ========

32-bit Windows
~~~~~~~~~~~~~~

The performance of 64-bit generators on 32-bit Windows is much lower than on 64-bit
operating systems due to register width. MT19937, the generator that has been
in NumPy since 2005, operates on 32-bit integers.

===================  =========  =======  ========
Distribution           MT19937    PCG64    Philox
===================  =========  =======  ========
32-bit Unsigned Int        100     30.6      28.1
64-bit Unsigned Int        100     24.2      23.7
Uniform                    100     26.7      28.4
Exponential                100     32.1      32.6
Normal                     100     36.3      37.5
**Overall**                100     29.7      29.7
===================  =========  =======  ========


.. note::

   Linux timings used Ubuntu 18.04 and GCC 7.4.  Windows timings were made on
   Windows 10 using Microsoft C/C++ Optimizing Compiler Version 19 (Visual
   Studio 2015). All timings were produced on a i5-3570 processor.
