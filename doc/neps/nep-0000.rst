===================
Purpose and Process
===================

:Author: Jarrod Millman <millman@berkeley.edu>
:Status: Active
:Type: Process
:Created: 2017-12-11


What is a NEP?
--------------

NEP stands for NumPy Enhancement Proposal.  A NEP is a design
document providing information to the NumPy community, or describing
a new feature for NumPy or its processes or environment.  The NEP
should provide a concise technical specification of the feature and a
rationale for the feature.

We intend NEPs to be the primary mechanisms for proposing major new
features, for collecting community input on an issue, and for
documenting the design decisions that have gone into NumPy.  The NEP
author is responsible for building consensus within the community and
documenting dissenting opinions.

Because the NEPs are maintained as text files in a versioned
repository, their revision history is the historical record of the
feature proposal [1]_.


Types
^^^^^

There are two kinds of NEP:

1. A **Standards Track** NEP describes a new feature or implementation
   for NumPy.

2. A **Process** NEP describes a process surrounding NumPy, or
   proposes a change to (or an event in) a process.  Process NEPs are
   like Standards Track NEPs but apply to areas other than the NumPy
   language itself.  They may propose an implementation, but not to
   NumPy's codebase; they require community consensus.  Examples include
   procedures, guidelines, changes to the decision-making process, and
   changes to the tools or environment used in NumPy development.
   Any meta-NEP is also considered a Process NEP.


NEP Workflow
------------

The NEP process begins with a new idea for NumPy.  It is highly
recommended that a single NEP contain a single key proposal or new
idea. Small enhancements or patches often don't need
a NEP and can be injected into the NumPy development workflow with a
pull request to the NumPy `repo`_. The more focused the
NEP, the more successful it tends to be.
If in doubt, split your NEP into several well-focused ones.

Each NEP must have a champion---someone who writes the NEP using the style
and format described below, shepherds the discussions in the appropriate
forums, and attempts to build community consensus around the idea.  The NEP
champion (a.k.a. Author) should first attempt to ascertain whether the idea is
suitable for a NEP. Posting to the numpy-discussion `mailing list`_ is the best
way to go about doing this.

The proposal should be submitted as a draft NEP via a `GitHub pull
request`_ to the ``doc/neps`` directory with the name ``nep-<n>.rst``
where ``<n>`` is an appropriately assigned four-digit number (e.g.,
``nep-0000.rst``). The draft must use the :doc:`nep-template` file.

Once the PR is in place, the NEP should be announced on the mailing
list for discussion (comments on the PR itself should be restricted to
minor editorial and technical fixes).

At the earliest convenience, the PR should be merged (regardless of
whether it is accepted during discussion).  Additional PRs may be made
by the Author to update or expand the NEP, or by maintainers to set
its status, discussion URL, etc.

Standards Track NEPs consist of two parts, a design document and a
reference implementation.  It is generally recommended that at least a
prototype implementation be co-developed with the NEP, as ideas that sound
good in principle sometimes turn out to be impractical when subjected to the
test of implementation.  Often it makes sense for the prototype implementation
to be made available as PR to the NumPy repo (making sure to appropriately
mark the PR as a WIP).


Review and Resolution
^^^^^^^^^^^^^^^^^^^^^

NEPs are discussed on the mailing list.  The possible paths of the
status of NEPs are as follows:

.. image:: _static/nep-0000.png

All NEPs should be created with the ``Draft`` status.

Normally, a NEP is ``Accepted`` by consensus of all interested
Contributors. To verify that consensus has been reached, the NEP
author or another interested party should make a post on the
numpy-discussion mailing list proposing it for acceptance; if there
are no substantive objections after one week, the NEP can officially
be marked ``Accepted``, and a link to this post should be added to the
NEP for reference.

In unusual cases, the `NumPy Steering Council`_ may be asked to decide whether
a controversial NEP is ``Accepted``.

Once a NEP has been ``Accepted``, the reference implementation must be
completed.  When the reference implementation is complete and incorporated
into the main source code repository, the status will be changed to ``Final``.

A NEP can also be assigned status ``Deferred``.  The NEP author or a
core developer can assign the NEP this status when no progress is being made
on the NEP.

A NEP can also be ``Rejected``.  Perhaps after all is said and done it
was not a good idea.  It is still important to have a record of this
fact. The ``Withdrawn`` status is similar---it means that the NEP author
themselves has decided that the NEP is actually a bad idea, or has
accepted that a competing proposal is a better alternative.

When a NEP is ``Accepted``, ``Rejected``, or ``Withdrawn``, the NEP should be
updated accordingly. In addition to updating the status field, at the very
least the ``Resolution`` header should be added with a link to the relevant
post in the mailing list archives.

NEPs can also be ``Superseded`` by a different NEP, rendering the
original obsolete.  The ``Replaced-By`` and ``Replaces`` headers
should be added to the original and new NEPs respectively.

Process NEPs may also have a status of ``Active`` if they are never
meant to be completed, e.g. NEP 0 (this NEP).


Maintenance
^^^^^^^^^^^

In general, Standards track NEPs are no longer modified after they have
reached the Final state as the code and project documentation are considered
the ultimate reference for the implemented feature.
However, finalized Standards track NEPs may be updated as needed.

Process NEPs may be updated over time to reflect changes
to development practices and other details. The precise process followed in
these cases will depend on the nature and purpose of the NEP being updated.


Format and Template
-------------------

NEPs are UTF-8 encoded text files using the reStructuredText_ format.  Please
see the :doc:`nep-template` file and the reStructuredTextPrimer_ for more
information.  We use Sphinx_ to convert NEPs to HTML for viewing on the web
[2]_.


Header Preamble
^^^^^^^^^^^^^^^

Each NEP must begin with a header preamble.  The headers
must appear in the following order.  Headers marked with ``*`` are
optional.  All other headers are required. ::

    :Author: <list of authors' real names and optionally, email addresses>
    :Status: <Draft | Active | Accepted | Deferred | Rejected |
             Withdrawn | Final | Superseded>
    :Type: <Standards Track | Process>
    :Created: <date created on, in dd-mmm-yyyy format>
  * :Requires: <nep numbers>
  * :NumPy-Version: <version number>
  * :Replaces: <nep number>
  * :Replaced-By: <nep number>
  * :Resolution: <url>

The Author header lists the names, and optionally the email addresses
of all the authors of the NEP.  The format of the Author header
value must be

    Random J. User <address@dom.ain>

if the email address is included, and just

    Random J. User

if the address is not given.  If there are multiple authors, each should be on
a separate line.


Discussion
----------

- https://mail.python.org/pipermail/numpy-discussion/2017-December/077481.html


References and Footnotes
------------------------

.. [1] This historical record is available by the normal git commands
   for retrieving older revisions, and can also be browsed on
   `GitHub <https://github.com/numpy/numpy/tree/master/doc/neps>`_.

.. [2] The URL for viewing NEPs on the web is
   http://numpy.github.io/neps/.

.. _repo: https://github.com/numpy/numpy

.. _mailing list: https://mail.python.org/mailman/listinfo/numpy-discussion

.. _issue tracker: https://github.com/numpy/numpy/issues

.. _NumPy Steering Council:
   https://docs.scipy.org/doc/numpy/dev/governance/governance.html

.. _`GitHub pull request`: https://github.com/numpy/numpy/pulls

.. _reStructuredText: http://docutils.sourceforge.net/rst.html

.. _reStructuredTextPrimer: http://www.sphinx-doc.org/en/stable/rest.html

.. _Sphinx: www.sphinx-doc.org/en/stable


Copyright
---------

This document has been placed in the public domain.
