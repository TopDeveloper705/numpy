===========================================================
NEP 34 â€” Disallow inferring ``dtype=object`` from sequences
===========================================================

:Author: Matti Picus
:Status: Draft
:Type: Standards Track
:Created: 2019-10-10


Abstract
--------

When users create arrays with lists-of-lists, they sometimes err in matching
the lengths of the nested lists, commonly called "ragged arrays". Creating such
arrays via ``np.array([<ragged_nested_sequence>])`` with no ``dtype`` keyword
argument will today default to an ``object``-dtype array. Change the behaviour to
raise a ``ValueError`` instead.

Motivation and Scope
--------------------

Users who specify lists-of-lists when creating a `numpy.ndarray` via
``np.array`` may mistakenly pass in lists of different lengths. Currently we
accept this input and create a ragged array with ``dtype=object``. This can be
confusing, since it is rarely what is desired. Changing the automatic dtype
detection to never return ``object`` for ragged arrays will force users who
actually wish to create ``object`` arrays to specify that explicitly, see for
instance `issue 5303`_.

Usage and Impact
----------------

After this change, ragged array creation must explicitly define a dtype:

    >>> np.array([[1, 2], [1]])
    ValueError: cannot guess the desired dtype from the input

    >>> np.array([[1, 2], [1]], dtype=object)
    # succeeds, with no change from current behaviour

Detailed description
--------------------

To explicitly set the shape of the object array, since it is sometimes hard to
determine what shape is desired, one could use:

    >>> arr = np.empty(correct_shape, dtype=object)
    >>> arr[...] = values

Related Work
------------

`PR 14341`_ tried to raise an error when ragged arrays were specified with
a numeric dtype ``np.array, [[1], [2, 3]], dtype=int)`` but failed due to
false-positives, for instance ``np.array([1, np.array([5])], dtype=int)``.

.. _`PR 14341`: https://github.com/numpy/numpy/pull/14341

Implementation
--------------

The code to be changed is inside ``PyArray_DTypeFromObject``, specifically in
``PyArray_DTypeFromObjectHelper``. Since ``PyArray_DTypeFromObject`` is part of
the NumPy C-API, its interface cannot be changed, but it can return ``-1`` to
indicate failure.

Backward compatibility
----------------------

Anyone depending on ragged lists-of-lists creating object arrays will need to
modify their code. There will be a deprecation period during which the current
behaviour will emit a ``DeprecationWarning``.


Alternatives
------------

We could continue with the current situation.

It was also suggested to add a kwarg `depth` to array creation, or perhaps to
add another array creation API function `ragged_array_object`. The goal was
to eliminate the ambiguity in creating an object array from `array([[1, 2],
[1]], dtype=object)`: should the returned array have a shape of `(1,)`, or
`(2,)`? This NEP does not deal with that issue, and only deprecates the use of
`array` with no `dtype=object` for ragged arrays.

It was also suggested to deprecate all automatic creation of ``object``-dtype
arrays, which would require a dtype for something like ``np.array([Decimal(10),
Decimal(10)])``. This too is out of scope for the current NEP: only if all the
top-level elements are `sequences`_ will we require an explicit
``dtype=object``.

Discussion
----------

Comments to `issue 5303`_ indicate this is unintended behaviour as far back as
2014. Suggestions to change it have been made in the ensuing years, but none
have stuck. The mailing list 

References and Footnotes
------------------------

.. _`issue 5303`: https://github.com/numpy/numpy/issues/5303
.. _`sequences`: https://docs.python.org/3.7/glossary.html#term-sequence

Copyright
---------

This document has been placed in the public domain.
