/*@targets
 ** $maxopt baseline
 ** sse2 sse41 avx2 avx512f avx512_skx
 ** vsx2 vsx4
 ** neon
 **/
#define _UMATHMODULE
#define _MULTIARRAYMODULE
#define NPY_NO_DEPRECATED_API NPY_API_VERSION

#include "simd/simd.h"
#include "loops_utils.h"
#include "loops.h"
#include "lowlevel_strided_loops.h"
// Provides the various *_LOOP macros
#include "fast_loop_macros.h"

//###############################################################################
//## Division
//###############################################################################
/********************************************************************************
 ** Defining the SIMD kernels
 *
 * Floor division of signed is based on T. Granlund and P. L. Montgomery
 * "Division by invariant integers using multiplication(see [Figure 6.1]
 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.1.2556)"
 * For details on TRUNC division see simd/intdiv.h for more clarification
 ***********************************************************************************
 ** Figure 6.1: Signed division by run-time invariant divisor, rounded towards -INF
 ***********************************************************************************
 * For q = FLOOR(a/d), all sword:
 *     sword -dsign = SRL(d, N - 1);
 *     uword -nsign = (n < -dsign);
 *     uword -qsign = EOR(-nsign, -dsign);
 *     q = TRUNC((n - (-dsign ) + (-nsign))/d) - (-qsign);
 ********************************************************************************/

#if NPY_SIMD
/**begin repeat
 * Signed types
 * #sfx    = s8, s16, s32, s64#
 * #len    = 8,  16,  32,  64#
 */
static NPY_INLINE void
simd_divide_by_scalar_contig_@sfx@(char **args, npy_intp len)
{
    npyv_lanetype_@sfx@ *src   = (npyv_lanetype_@sfx@ *) args[0];
    npyv_lanetype_@sfx@ scalar = *(npyv_lanetype_@sfx@ *) args[1];
    npyv_lanetype_@sfx@ *dst   = (npyv_lanetype_@sfx@ *) args[2];
    const int vstep            = npyv_nlanes_@sfx@;
    const npyv_@sfx@x3 divisor = npyv_divisor_@sfx@(scalar);

    if (scalar == -1) {
        npyv_b@len@ noverflow = npyv_cvt_b@len@_@sfx@(npyv_setall_@sfx@(-1));
        npyv_@sfx@ vzero      = npyv_zero_@sfx@();
        for (; len >= vstep; len -= vstep, src += vstep, dst += vstep) {
            npyv_@sfx@ a       = npyv_load_@sfx@(src);
            npyv_b@len@ gt_min = npyv_cmpgt_@sfx@(a, npyv_setall_@sfx@(NPY_MIN_INT@len@));
            noverflow          = npyv_and_b@len@(noverflow, gt_min);
            npyv_@sfx@ neg     = npyv_ifsub_@sfx@(gt_min, vzero, a, vzero);
            npyv_store_@sfx@(dst, neg);
        }

        int raise_err = npyv_tobits_b@len@(npyv_not_b@len@(noverflow)) != 0;
        for (; len > 0; --len, ++src, ++dst) {
            npyv_lanetype_@sfx@ a = *src;
            if (a == NPY_MIN_INT@len@) {
                raise_err = 1;
                *dst  = 0;
            } else {
                *dst = -a;
            }
        }
        if (raise_err) {
            npy_set_floatstatus_divbyzero();
        }
    } else {
        for (; len >= vstep; len -= vstep, src += vstep, dst += vstep) {
            npyv_@sfx@  nsign_d   = npyv_setall_@sfx@(scalar < 0);
            npyv_@sfx@  a         = npyv_load_@sfx@(src);
            npyv_@sfx@  nsign_a   = npyv_cvt_@sfx@_b@len@(npyv_cmplt_@sfx@(a, nsign_d));
            nsign_a               = npyv_and_@sfx@(nsign_a, npyv_setall_@sfx@(1));
            npyv_@sfx@  diff_sign = npyv_sub_@sfx@(nsign_a, nsign_d);
            npyv_@sfx@  to_ninf   = npyv_xor_@sfx@(nsign_a, nsign_d);
            npyv_@sfx@  trunc     = npyv_divc_@sfx@(npyv_add_@sfx@(a, diff_sign), divisor);
            npyv_@sfx@  floor     = npyv_sub_@sfx@(trunc, to_ninf);
            npyv_store_@sfx@(dst, floor);
        }

        for (; len > 0; --len, ++src, ++dst) {
            const npyv_lanetype_@sfx@ a = *src;
            npyv_lanetype_@sfx@ r = a / scalar;
            // Negative quotients needs to be rounded down
            if (((a > 0) != (scalar > 0)) && ((r * scalar) != a)) {
                r--;
            }
            *dst = r;
        }
    }
    npyv_cleanup();
}
/**end repeat**/

#if defined(NPY_HAVE_VSX4)
/*
 * As Power10 only supports integer vector division for data of 32 bits or
 * greater, we have to convert npyv_u8 into 4x npyv_u32, execute the integer
 * vector division instruction, and then, convert the result back to npyv_u8.
 */
NPY_FINLINE npyv_u8 vsx4_div_u8(npyv_u8 a, npyv_u8 b)
{
    npyv_u16x2 a_expand = npyv_expand_u16_u8(a);
    npyv_u32x2 ahi = npyv_expand_u32_u16(a_expand.val[0]);
    npyv_u32x2 alo = npyv_expand_u32_u16(a_expand.val[1]);
    npyv_u16x2 b_expand = npyv_expand_u16_u8(b);
    npyv_u32x2 bhi = npyv_expand_u32_u16(b_expand.val[0]);
    npyv_u32x2 blo = npyv_expand_u32_u16(b_expand.val[1]);
    npyv_u32 divhi1 = vec_div(ahi.val[0], bhi.val[0]);
    npyv_u32 divlo1 = vec_div(ahi.val[1], bhi.val[1]);
    npyv_u32 divhi2 = vec_div(alo.val[0], blo.val[0]);
    npyv_u32 divlo2 = vec_div(alo.val[1], blo.val[1]);
    npyv_u16 reshi = (npyv_u16)vec_pack(divhi1, divlo1);
    npyv_u16 reslo = (npyv_u16)vec_pack(divhi2, divlo2);
    npyv_u8 res = (npyv_u8)vec_pack(reshi, reslo);
    return res;
}

NPY_FINLINE npyv_u16 vsx4_div_u16(npyv_u16 a, npyv_u16 b)
{
    npyv_u32x2 a_expand = npyv_expand_u32_u16(a);
    npyv_u32x2 b_expand = npyv_expand_u32_u16(b);
    npyv_u32 divhi = vec_div(a_expand.val[0], b_expand.val[0]);
    npyv_u32 divlo = vec_div(a_expand.val[1], b_expand.val[1]);
    npyv_u16 res = (npyv_u16)vec_pack(divhi, divlo);
    return res;
}

#define vsx4_div_u32 vec_div

/**begin repeat
 * Unsigned types
 * #sfx    = u8, u16, u32#
 * #len    = 8,  16,  32#
 */
static NPY_INLINE void
vsx4_simd_divide_contig_@sfx@(char **args, npy_intp len)
{
    npyv_lanetype_@sfx@ *src1  = (npyv_lanetype_@sfx@ *) args[0];
    npyv_lanetype_@sfx@ *src2  = (npyv_lanetype_@sfx@ *) args[1];
    npyv_lanetype_@sfx@ *dst   = (npyv_lanetype_@sfx@ *) args[2];
    const int vstep            = npyv_nlanes_@sfx@;
    const npyv_@sfx@ zero      = npyv_zero_@sfx@();

    for (; len >= vstep; len -= vstep, src1 += vstep, src2 += vstep,
         dst += vstep) {
        npyv_@sfx@ a = npyv_load_@sfx@(src1);
        npyv_@sfx@ b = npyv_load_@sfx@(src2);
        npyv_@sfx@ c = vsx4_div_@sfx@(a, b);
        npyv_store_@sfx@(dst, c);
        if (NPY_UNLIKELY(vec_any_eq(b, zero))) {
            npy_set_floatstatus_divbyzero();
        }
    }

    for (; len > 0; --len, ++src1, ++src2, ++dst) {
        const npyv_lanetype_@sfx@ a = *src1;
        const npyv_lanetype_@sfx@ b = *src2;
        if (NPY_UNLIKELY(b == 0)) {
            npy_set_floatstatus_divbyzero();
            *dst = 0;
        } else{
            *dst = a / b;
        }
    }
    npyv_cleanup();
}
/**end repeat**/
#endif // NPY_HAVE_VSX4

/**begin repeat
 * Unsigned types
 * #sfx    = u8, u16, u32, u64#
 * #len    = 8,  16,  32,  64#
 */
static NPY_INLINE void
simd_divide_by_scalar_contig_@sfx@(char **args, npy_intp len)
{
    npyv_lanetype_@sfx@ *src   = (npyv_lanetype_@sfx@ *) args[0];
    npyv_lanetype_@sfx@ scalar = *(npyv_lanetype_@sfx@ *) args[1];
    npyv_lanetype_@sfx@ *dst   = (npyv_lanetype_@sfx@ *) args[2];
    const int vstep            = npyv_nlanes_@sfx@;
    const npyv_@sfx@x3 divisor = npyv_divisor_@sfx@(scalar);

    for (; len >= vstep; len -= vstep, src += vstep, dst += vstep) {
        npyv_@sfx@ a = npyv_load_@sfx@(src);
        npyv_@sfx@ c = npyv_divc_@sfx@(a, divisor);
        npyv_store_@sfx@(dst, c);
    }

    for (; len > 0; --len, ++src, ++dst) {
        const npyv_lanetype_@sfx@ a = *src;
        *dst = a / scalar;
    }
    npyv_cleanup();
}
/**end repeat**/
#endif // NPY_SIMD

/********************************************************************************
 ** Defining ufunc inner functions
 ********************************************************************************/

/**begin repeat
 * Signed types
 *  #type  = npy_byte, npy_short, npy_int, npy_long, npy_longlong#
 *  #TYPE  = BYTE,     SHORT,     INT,     LONG,     LONGLONG#
 */
#undef TO_SIMD_SFX
#if 0
/**begin repeat1
 * #len = 8, 16, 32, 64#
 */
#elif NPY_BITSOF_@TYPE@ == @len@
    #define TO_SIMD_SFX(X) X##_s@len@
/**end repeat1**/
#endif

#if NPY_BITSOF_@TYPE@ == 64 && !defined(NPY_HAVE_VSX4) && (defined(NPY_HAVE_VSX) || defined(NPY_HAVE_NEON))
    #undef TO_SIMD_SFX
#endif

NPY_FINLINE @type@ floor_div_@TYPE@(const @type@ n, const @type@ d)
{
    /*
     * FIXME: On x86 at least, dividing the smallest representable integer
     * by -1 causes a SIFGPE (division overflow). We treat this case here
     * (to avoid a SIGFPE crash at python level), but a good solution would
     * be to treat integer division problems separately from FPU exceptions
     * (i.e. a different approach than npy_set_floatstatus_divbyzero()).
     */
    if (NPY_UNLIKELY(d == 0 || (n == NPY_MIN_@TYPE@ && d == -1))) {
        npy_set_floatstatus_divbyzero();
        return 0;
    }
    @type@ r = n / d;
    // Negative quotients needs to be rounded down
    if (((n > 0) != (d > 0)) && ((r * d) != n)) {
        r--;
    }
    return r;
}

NPY_NO_EXPORT void NPY_CPU_DISPATCH_CURFX(@TYPE@_divide)
(char **args, npy_intp const *dimensions, npy_intp const *steps, void *NPY_UNUSED(func))
{
    if (IS_BINARY_REDUCE) {
        BINARY_REDUCE_LOOP(@type@) {
            io1 = floor_div_@TYPE@(io1, *(@type@*)ip2);
        }
        *((@type@ *)iop1) = io1;
    }
#if NPY_SIMD && defined(TO_SIMD_SFX)
    // for contiguous block of memory, divisor is a scalar and not 0
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(@type@), NPY_SIMD_WIDTH) &&
             (*(@type@ *)args[1]) != 0) {
        TO_SIMD_SFX(simd_divide_by_scalar_contig)(args, dimensions[0]);
    }
#endif
    else {
        BINARY_LOOP {
            *((@type@ *)op1) = floor_div_@TYPE@(*(@type@*)ip1, *(@type@*)ip2);
        }
    }
}
/**end repeat**/

/**begin repeat
 * Unsigned types
 *  #type  = npy_ubyte, npy_ushort, npy_uint, npy_ulong, npy_ulonglong#
 *  #TYPE  = UBYTE,     USHORT,     UINT,     ULONG,     ULONGLONG#
 *  #STYPE = BYTE,      SHORT,      INT,      LONG,      LONGLONG#
 *  #vector = 1, 1, 1, 0, 0#
 */
#undef TO_SIMD_SFX
#if 0
/**begin repeat1
 * #len = 8, 16, 32, 64#
 */
#elif NPY_BITSOF_@STYPE@ == @len@
    #define TO_SIMD_SFX(X) X##_u@len@
/**end repeat1**/
#endif
/*
 * For 64-bit division on Armv7, Aarch64, and IBM/Power, NPYV fall-backs to the scalar division
 * because emulating multiply-high on these architectures is going to be expensive comparing
 * to the native scalar dividers.
 * Therefore it's better to disable NPYV in this special case to avoid any unnecessary shuffles.
 * Power10(VSX4) is an exception here since it has native support for integer vector division.
 */
#if NPY_BITSOF_@STYPE@ == 64 && !defined(NPY_HAVE_VSX4) && (defined(NPY_HAVE_VSX) || defined(NPY_HAVE_NEON))
    #undef TO_SIMD_SFX
#endif
NPY_NO_EXPORT void NPY_CPU_DISPATCH_CURFX(@TYPE@_divide)
(char **args, npy_intp const *dimensions, npy_intp const *steps, void *NPY_UNUSED(func))
{
    if (IS_BINARY_REDUCE) {
        BINARY_REDUCE_LOOP(@type@) {
            const @type@ d = *(@type@ *)ip2;
            if (NPY_UNLIKELY(d == 0)) {
                npy_set_floatstatus_divbyzero();
                io1 = 0;
            } else {
                io1 /= d;
            }
        }
        *((@type@ *)iop1) = io1;
    }
#if NPY_SIMD && defined(TO_SIMD_SFX)
#if defined(NPY_HAVE_VSX4) && @vector@
    // both arguments are arrays of the same size
    else if (IS_BLOCKABLE_BINARY(sizeof(@type@), NPY_SIMD_WIDTH)) {
        TO_SIMD_SFX(vsx4_simd_divide_contig)(args, dimensions[0]);
    }
#endif
    // for contiguous block of memory, divisor is a scalar and not 0
    else if (IS_BLOCKABLE_BINARY_SCALAR2(sizeof(@type@), NPY_SIMD_WIDTH) &&
             (*(@type@ *)args[1]) != 0) {
        TO_SIMD_SFX(simd_divide_by_scalar_contig)(args, dimensions[0]);
    }
#endif
    else {
        BINARY_LOOP {
            const @type@ in1 = *(@type@ *)ip1;
            const @type@ in2 = *(@type@ *)ip2;
            if (NPY_UNLIKELY(in2 == 0)) {
                npy_set_floatstatus_divbyzero();
                *((@type@ *)op1) = 0;
            } else{
                *((@type@ *)op1) = in1 / in2;
            }
        }
    }
}
/**end repeat**/
