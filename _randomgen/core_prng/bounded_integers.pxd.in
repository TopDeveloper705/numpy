from libc.stdint cimport (uint8_t, uint16_t, uint32_t, uint64_t,
                          int8_t, int16_t, int32_t, int64_t, intptr_t)
from common cimport prng_t
import numpy as np
cimport numpy as np 
ctypedef np.npy_bool bool_t

cdef inline uint64_t _gen_mask(uint64_t max_val) nogil:
    """Mask generator for use in bounded random numbers"""
    # Smallest bit mask >= max
    cdef uint64_t mask = max_val
    mask |= mask >> 1
    mask |= mask >> 2
    mask |= mask >> 4
    mask |= mask >> 8
    mask |= mask >> 16
    mask |= mask >> 32
    return mask
{{
py:
type_info = ('uint32','uint16','uint8','bool','int32','int16','int8')
}}
{{for nptype in type_info}}
cdef object _rand_{{nptype}}_broadcast(np.ndarray low, np.ndarray high, object size, prng_t *state, object lock)
{{endfor}}
{{
py:
big_type_info = ('uint64', 'int64')
}}
{{for nptype in big_type_info}}
cdef object _rand_{{nptype}}_broadcast(object low, object high, object size, prng_t *state, object lock)
{{endfor}}
{{
py:
type_info = ('uint64','uint32','uint16','uint8','bool','int64','int32','int16','int8')
}}
{{for nptype in type_info}}
cdef object _rand_{{nptype}}(object low, object high, object size, prng_t *state, object lock)
{{endfor}}
